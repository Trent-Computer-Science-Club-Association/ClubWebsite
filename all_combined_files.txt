File: components/EventBanner.tsx
// CSS
import styles from '../styles/components/EventBanner.module.scss';
// Config
import { website_config } from '../config';
import ReactMarkdown from 'react-markdown';

interface Props {
  color?: string;
}

export default function EventBanner({ color = 'event-banner' }: Props) {
  const { banner_text } = website_config;
  if (banner_text == undefined) return null;
  if (banner_text.length == 0) return null;

  return (
    <div className={styles.EventBanner} style={{ backgroundColor: color }}>
      {/* Event Content */}
      <div className={styles.EventContent}>
        <ReactMarkdown className={styles.Markdown}>{banner_text}</ReactMarkdown>
      </div>
    </div>
  );
}



File: components/NavBar.tsx
// CSS
import styles from '../styles/components/NavBar.module.scss';
// Config
import { page_list } from '../config';
// Components
import Button, { ButtonType } from '../components/Button';

// Component
interface Props {
  currentPage: string;
}
export default function NavBar(props: Props) {
  // Build The Nav
  const navContent: JSX.Element[] = [];
  page_list.forEach((page, index) => {
    if (!page.display_in_navbar) return;
    navContent.push(
      <li
        key={index}
        className={
          props.currentPage == page.page_name ? styles.currentPage : ''
        }
      >
        <Button
          type={ButtonType.NAVBAR}
          href={page.page_link}
          className={
            props.currentPage == page.page_name
              ? ButtonType.NAVBAR_ACTIVE
              : ButtonType.NAVBAR
          }
          label={page.page_name}
        />
      </li>
    );
  });
  // Return Our Layout
  return (
    <nav className={styles.NavBar}>
      {/* TODO: LOGO */}
      <div className={styles.Icon}></div>
      {/* Navigation */}
      <ul className={styles.LinkArea}>{navContent}</ul>
    </nav>
  );
}



File: components/ListingCard.tsx
import Button, { ButtonType } from '../components/Button';
import styles from '../styles/components/ListingCard.module.scss';
import { Listing, ListingType } from '../config';
import DynamicIcon from '../components/DynamicIcon';

interface ListingCardProps {
  position: Listing;
  onLearnMore: (position: Listing) => void;
}

const ListingCard: React.FC<ListingCardProps> = ({ position, onLearnMore }) => {
  const isHighestPriority = position.priority === 1;
  const borderClass = isHighestPriority ? styles.gradientBorder : '';

  const getUnderlineClass = (type: ListingType) => {
    const baseClass = styles.underline;
    switch (type) {
      case ListingType.Developer:
        return `${baseClass} ${styles.developerUnderline}`;
      case ListingType.Creative:
        return `${baseClass} ${styles.creativeUnderline}`;
      case ListingType.Managerial:
        return `${baseClass} ${styles.managerialUnderline}`;
      case ListingType.Volunteer:
        return `${baseClass} ${styles.volunteerUnderline}`;
      default:
        return baseClass;
    }
  };

  return (
    <div className={`${styles.border} ${borderClass}`}>
      <div className={styles.card}>
        <h2>{position.title}</h2>
        <hr className={getUnderlineClass(position.type)} />
        <p>{position.description}</p>
        <ul>
          {position.requirements.map((requirement, reqIndex) => (
            <li key={reqIndex}>
              <div className={styles.requirementIcon}>
                <DynamicIcon iconName={requirement.icon} />
              </div>
              <p>{requirement.description}</p>
            </li>
          ))}
        </ul>
        <Button
          onClick={() => onLearnMore(position)}
          className={styles.learnMoreButton}
          type={ButtonType.LIGHT}
          label='Learn More'
        />
      </div>
    </div>
  );
};

export default ListingCard;



File: components/DynamicIcon.tsx
import React, { useEffect, useState, useMemo } from 'react';
import * as IconsAi from 'react-icons/ai';
import * as IconsBs from 'react-icons/bs';
import * as IconsFa from 'react-icons/fa';
import * as IconsMd from 'react-icons/md';

type IconSet =
  | typeof IconsAi
  | typeof IconsBs
  | typeof IconsFa
  | typeof IconsMd;

const iconSets: Record<string, IconSet> = {
  Ai: IconsAi,
  Bs: IconsBs,
  Fa: IconsFa,
  Md: IconsMd,
};

interface DynamicIconProps {
  iconName?: string;
}

const DynamicIcon: React.FC<DynamicIconProps> = ({ iconName = 'FaCheck' }) => {
  const [Icon, setIcon] = useState<React.ComponentType | null>(null);

  const prefix = useMemo(() => iconName.slice(0, 2), [iconName]);
  const iconSet = useMemo(() => iconSets[prefix], [prefix]);

  useEffect(() => {
    if (iconSet && iconName in iconSet) {
      setIcon(() => iconSet[iconName as keyof IconSet]);
    } else {
      console.warn(`Icon ${iconName} not found`);
      setIcon(null);
    }
  }, [iconName, iconSet]);

  if (!Icon) return null;
  return <Icon />;
};

export default DynamicIcon;



File: components/BlurBanner.tsx
import Image from './Image';
import styles from '../styles/components/BlurBanner.module.scss';

interface Props {
  imagePath: string;
  altText: string;
  title: string;
  sectionHeader?: string;
}

const BlurBanner: React.FC<Props> = ({
  imagePath,
  altText,
  title,
  sectionHeader,
}) => {
  return (
    <div className={styles.Container}>
      <div className={styles.BlurBanner}>
        <div className={styles.imageContainer}>
          <Image src={imagePath} alt={altText} fill={true} />
        </div>
        <div className={styles.overlay}>
          <h1 className={styles.title}>{title}</h1>
        </div>
        {sectionHeader && (
          <div className={styles.waveContainer}>
            <Image src={'wave.svg'} alt={'wave'} fill={true} />
            <div>
              <h2 className={styles.sectionHeader}>{sectionHeader}</h2>
              <hr className={styles.sectionHeaderUnderline} />
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default BlurBanner;



File: components/TextBox.tsx
import React from 'react';
import styles from '../styles/components/TextBox.module.scss';
import Image from './Image';
import { type SocialIcon } from '../config';

interface Props {
  title: string;
  description: string;
  links?: SocialIcon[];
}

export default function TextBox({ title, description, links }: Props) {
  return (
    <div className={styles.TextBox}>
      <h2>{title}</h2>
      <p>{description}</p>
      {links && (
        <div className={styles.links}>
          {links.map((link, index) => (
            <a key={index} href={link.link} target='_blank' rel='noreferrer'>
              <div className={styles.iconWrapper}>
                <Image src={link.path} alt={link.text} width={15} height={15} />
              </div>
              <span>{link.text}</span>
            </a>
          ))}
        </div>
      )}
    </div>
  );
}



File: components/Footer.tsx
import styles from '../styles/components/Footer.module.scss';
import Button, { ButtonType } from '../components/Button';
import Link from 'next/link';
import { website_config, footer_config } from '../config';
import ReactMarkdown from 'react-markdown';
import Logo from '../components/Logo';

export default function Footer() {
  const { social_icons } = website_config;
  const { text } = footer_config;
  // ui
  return (
    <footer className={styles.Footer}>
      {/* Top section */}
      <div className={styles.top}>
        <ReactMarkdown className={styles.text}>{text}</ReactMarkdown>
      </div>
      {/* Left side */}
      <div className={styles.left}>
        <div className={styles.logo}>
          <Logo />
        </div>
        <Link href={`mailto:${website_config.email}`} className={styles.link}>
          {website_config.email}
        </Link>
      </div>
      {/* Right side */}
      <div className={styles.right}>
        <div className={styles.socialMedia}>
          {social_icons.map(({ alt_text, link, path }, i) => (
            <Button
              key={i}
              image={{ src: path, altText: alt_text }}
              type={ButtonType.SOCIAL_DARK}
              href={link}
              className={styles.socialMedia}
            />
          ))}
        </div>
      </div>
    </footer>
  );
}



File: components/ContactForm.tsx
import React, { useState, useEffect } from 'react';
import Select from 'react-select';
import styles from '../styles/components/ContactForm.module.scss';

interface TextInputProps {
  label: string;
  type: string;
  placeholder: string;
  value: string;
  long?: boolean;
  mandatory?: boolean;
}

interface DropdownInputProps {
  label: string;
  options: { value: string; label: string }[];
  value: { value: string; label: string } | null;
  mandatory?: boolean;
}

interface GroupProps {
  inputs: (TextInputProps | DropdownInputProps)[];
}

type FormItem = TextInputProps | DropdownInputProps | GroupProps;

type SubmissionState = { success: true } | { success: false; message: string };

interface ContactFormProps {
  title: string;
  description: string;
  formItems: FormItem[];
  onSubmit: (formData: Record<string, string>) => Promise<void | Response>;
  formData: Record<string, string>;
  onInputChange: (label: string, value: string) => void;
}

const ContactForm: React.FC<ContactFormProps> = ({
  title,
  description,
  formItems,
  onSubmit,
  formData,
  onInputChange,
}) => {
  const [touchedFields, setTouchedFields] = useState<Record<string, boolean>>(
    {}
  );
  const [canSubmit, setCanSubmit] = useState<boolean>(false);
  const [submissionState, setSubmissionState] =
    useState<SubmissionState | null>(null);

  useEffect(() => {
    validateForm();
  }, [formData, touchedFields]);

  const handleBlur = (label: string) => {
    setTouchedFields((prevTouched) => ({ ...prevTouched, [label]: true }));
  };

  const validateEmail = (email: string): boolean => {
    // This regex comes from https://stackoverflow.com/a/46181
    // see throrough evaluation of the regex here: https://jsfiddle.net/ghvj4gy9/
    const emailRegex =
      /^(([^<>()[\]\\.,;:\s@"]+(\.[^<>()[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
    return emailRegex.test(email);
  };

  const validateForm = () => {
    let isValid = true;

    const validateItems = (items: any[]) => {
      items.forEach((item) => {
        if ('inputs' in item) {
          validateItems(item.inputs);
        } else {
          const value = formData[item.label] || '';
          const isTouched = touchedFields[item.label] || false;
          if (
            isTouched &&
            (value.trim() === '' ||
              (item.type === 'email' && !validateEmail(value)))
          ) {
            isValid = false;
          }
        }
      });
    };

    validateItems(formItems);
    setCanSubmit(isValid);
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();

    // Mark all fields as touched
    const allTouched: Record<string, boolean> = {};
    const validateItems = (items: any[]) => {
      items.forEach((item) => {
        if ('inputs' in item) {
          validateItems(item.inputs);
        } else {
          allTouched[item.label] = true;
        }
      });
    };
    validateItems(formItems);
    setTouchedFields(allTouched);

    // Re-validate the form
    validateForm();

    if (canSubmit) {
      const response = await onSubmit(formData).catch((error: any) => {
        setSubmissionState({ success: false, message: error.message });
      });
      if (response instanceof Response && response.status === 204) {
        setSubmissionState({
          success: true,
        });
      }
      if (submissionState) {
        // Reset form after successful submission
        setTouchedFields({});
      }
    }
  };

  const renderFormItem = (item: any, index: number) => {
    if ('inputs' in item) {
      return (
        <div key={`group-${index}`} className={styles.group}>
          {item.inputs.map((input: any, inputIndex: number) => (
            <div
              key={`group-item-${index}-${inputIndex}`}
              className={styles.groupItem}
            >
              {renderFormItem(input, inputIndex)}
            </div>
          ))}
        </div>
      );
    }

    const value = formData[item.label] || '';
    const isTouched = touchedFields[item.label] || false;
    const isInvalid =
      isTouched &&
      (value.trim() === '' || (item.type === 'email' && !validateEmail(value)));

    if (item.type === 'dropdown') {
      const selectedOption = item.options.find(
        (option: { value: string; label: string }) => option.value === value
      );
      return (
        <div
          key={`field-${index}`}
          className={`${styles.formField} ${isInvalid ? styles.invalidField : ''}`}
        >
          <label
            htmlFor={item.label}
            className={isInvalid ? styles.invalidLabel : ''}
          >
            {item.label}
            {item.mandatory && <span className={styles.mandatory}>*</span>}
          </label>
          <Select
            id={item.label}
            value={selectedOption}
            onChange={(option) =>
              onInputChange(item.label, option ? option.value : '')
            }
            onBlur={() => handleBlur(item.label)}
            options={item.options}
            placeholder={item.placeholder}
            // className={`${styles.reactSelect} ${isInvalid ? styles.invalidSelect : ''}`}
            className={'reactSelect'}
            classNamePrefix='react-select'
          />
          {isInvalid && (
            <span className={styles.errorText}>This field is required</span>
          )}
        </div>
      );
    }

    return (
      <div
        key={`field-${index}`}
        className={`${styles.formField} ${isInvalid ? styles.invalidField : ''}`}
      >
        <label
          htmlFor={item.label}
          className={isInvalid ? styles.invalidLabel : ''}
        >
          {item.label}
          {item.mandatory && <span className={styles.mandatory}>*</span>}
        </label>
        {item.long ? (
          <textarea
            id={item.label}
            value={value}
            onChange={(e) => onInputChange(item.label, e.target.value)}
            onBlur={() => handleBlur(item.label)}
            placeholder={item.placeholder}
            className={isInvalid ? styles.invalidInput : ''}
            maxLength={5000}
          />
        ) : (
          <input
            type={item.type}
            id={item.label}
            value={value}
            onChange={(e) => onInputChange(item.label, e.target.value)}
            onBlur={() => handleBlur(item.label)}
            placeholder={item.placeholder}
            className={isInvalid ? styles.invalidInput : ''}
          />
        )}
        {isInvalid && (
          <span className={styles.errorText}>
            {item.type === 'email'
              ? 'Please enter a valid email address'
              : 'This field is required'}
          </span>
        )}
      </div>
    );
  };

  return (
    <div className={styles.contactForm}>
      <h2>{title}</h2>
      <p>{description}</p>
      <form onSubmit={handleSubmit}>
        {formItems.map((item, index) => renderFormItem(item, index))}
        <button type='submit'>Submit</button>
      </form>
      {submissionState && submissionState.success && (
        <p className={styles.successMessage}>
          Form submitted successfully! We'll get back to you soon.
        </p>
      )}
      {submissionState && !submissionState.success && (
        <p className={styles.errorMessage}>
          There was an error submitting the form. Please email
          tcscadev@gmail.com or try again later.
        </p>
      )}
    </div>
  );
};

function TextInput(
  label: string,
  placeholder: string,
  value: string = '',
  long: boolean = false,
  mandatory: boolean = true,
  onChange?: (value: string) => void
) {
  return { label, type: 'text', placeholder, value, long, mandatory, onChange };
}

const EmailInput = (
  label: string,
  placeholder: string,
  value: string = '',
  mandatory: boolean = true
) => {
  return { label, type: 'email', placeholder, value, mandatory };
};

const DropdownInput = (
  label: string,
  placeholder: string,
  options: { value: string; label: string }[],
  value: string = '',
  mandatory: boolean = true
) => {
  return { label, type: 'dropdown', placeholder, options, value, mandatory };
};

const Group = (...inputs: (TextInputProps | DropdownInputProps)[]) => {
  return { inputs };
};

export default ContactForm;
export { TextInput, EmailInput, DropdownInput, Group };



File: components/Logo.tsx
import Link from 'next/link';
import Image from './Image';
import styles from '../styles/components/Logo.module.scss';

interface LogoProps {
  href?: string;
}

export default function Logo({ href = '/' }: LogoProps) {
  return (
    <Link href={href} className={styles.container}>
      <div>
        <Image src='/logo.svg' alt='TCSCA Logo' fill={true} />
      </div>
    </Link>
  );
}



File: components/HeroBanner.tsx
// CSS
import styles from '../styles/components/HeroBanner.module.scss';
import Button, { ButtonType } from './Button';
import Logo from '../components/Logo';
import { website_config } from '../config';

export default function HeroBanner() {
  const { title, social_icons, tagline } = website_config;
  // ui
  return (
    <div className={styles.HeroBanner}>
      {/* Left Column */}
      <div className={styles.leftColumn}>
        <Logo />
        <Button type={ButtonType.LIGHT} label='Apply' href={'/Contact'} />
      </div>
      {/* Right Column */}
      <div className={styles.rightColumn}>
        <h1>{title}</h1>
        <hr />
        <div className={styles.tagline}>{tagline}</div>
        <div className={styles.socialMedia}>
          {social_icons.map(({ alt_text, link, path }, i) => (
            <Button
              key={i}
              href={link}
              type={ButtonType.SOCIAL}
              image={{ src: path, altText: alt_text }}
            />
          ))}
        </div>
      </div>
    </div>
  );
}



File: components/Button.tsx
import React from 'react';
import Link from 'next/link';
import styles from '../styles/Button.module.scss';
import Image from '../components/Image';

const ButtonType = {
  NAVBAR: styles.navBtn,
  NAVBAR_ACTIVE: [styles.navBtn, styles.active].join(' '),
  LIGHT: styles.lightBtn,
  SOCIAL: styles.socialBtn,
  SOCIAL_DARK: styles.socialBtnDark,
} as const;

type ButtonType = (typeof ButtonType)[keyof typeof ButtonType];

interface Props {
  onClick?: () => void;
  href?: string;
  className?: string;
  type: ButtonType;
}

interface LabelProps extends Props {
  label: string;
  image?: never;
}

interface IconProps extends Props {
  image: {
    src: string;
    altText: string;
  };
  label?: string;
}

const Button: React.FC<LabelProps | IconProps> = ({
  onClick,
  href = '',
  className,
  type = ButtonType.NAVBAR,
  ...props
}) => {
  const classes = `${className} ${type} ${styles.button}`;
  const content = (
    <>
      {props.image == undefined ? (
        <></>
      ) : (
        <div className={styles.imageWrapper}>
          <Image src={props.image.src} alt={props.image.altText} fill={true} />
        </div>
      )}
      {props.label == undefined ? (
        <></>
      ) : (
        <span className={styles.buttonText}>{props.label}</span>
      )}
    </>
  );

  return href ? (
    <Link href={href} className={classes} onClick={onClick}>
      {content}
    </Link>
  ) : (
    <button onClick={onClick} className={classes}>
      {content}
    </button>
  );
};

export default Button;
export { ButtonType };



File: components/Image.tsx
// For future accessabiility concerns
import Image from 'next/image';

export default Image;



File: layouts/LatestNews.tsx
import moment from 'moment';
import React from 'react';
import Button, { ButtonType } from '../components/Button';
import Link from 'next/link';
import styles from '../styles/layouts/LatestNews.module.scss';
import ReactMarkdown from 'react-markdown';
import { type NewsSection } from '../config';

export const NewsSectionStyle = {
  primary: styles.primaryStyle,
  secondary: styles.secondaryStyle,
} as const;

export type NewsSectionStyleType =
  (typeof NewsSectionStyle)[keyof typeof NewsSectionStyle];

interface NewsItem {
  text: string;
  date: Date;
  href: string;
}
const formatDate = (date: Date): string => {
  return moment(date).format('MMMM Do, YYYY');
};
const NewsItemComponent: React.FC<NewsItem> = ({ text, href, date }) => {
  return (
    <Link className={styles.newsItem} href={href}>
      <div className={styles.left}>
        <ReactMarkdown className={styles.title}>{text}</ReactMarkdown>
        <p className={styles.date}>{formatDate(date)}</p>
      </div>
      <div className={styles.right}>
        <Button
          type={ButtonType.LIGHT}
          className={styles.learnMore}
          label='Learn more'
        />
      </div>
    </Link>
  );
};

interface NewsSectionProps {
  section: NewsSection;
  style?: NewsSectionStyleType;
}

const NewsSection: React.FC<NewsSectionProps> = ({
  section: { news_feed },
  style = NewsSectionStyle.primary,
}) => {
  return (
    <div className={`${styles.latestNewsLayout} ${style}`}>
      {news_feed.map((item, i) => (
        <NewsItemComponent key={i} {...item} />
      ))}
    </div>
  );
};

export default NewsSection;



File: layouts/Section.tsx
import React from 'react';
import SectionHeader, {
  SectionHeaderStyle,
  SectionLocation,
} from './SectionHeader';
import NewsSection, {
  NewsSectionStyle,
  type NewsSectionStyleType,
} from './LatestNews';
import TextSection, {
  TextSectionStyle,
  type TextSectionStyleType,
} from './TextSection';
import { SectionType, type Section } from '../config';

interface SectionProps {
  sectionConfig: Section;
  index: number;
}

const getStyle = (index: number) => {
  if (index % 2 === 0) {
    return {
      sectionStyle: SectionHeaderStyle.primary,
      location: SectionLocation.LEFT_ALIGNED,
      newsSectionStyle: NewsSectionStyle.primary,
      textSectionStyle: TextSectionStyle.primary,
    };
  } else {
    return {
      sectionStyle: SectionHeaderStyle.secondary,
      location: SectionLocation.RIGHT_ALIGNED,
      newsSectionStyle: NewsSectionStyle.secondary,
      textSectionStyle: TextSectionStyle.secondary,
    };
  }
};

const getContent = (
  sectionConfig: Section,
  index: number,
  style: {
    newsSectionStyle: NewsSectionStyleType;
    textSectionStyle: TextSectionStyleType;
  }
) => {
  switch (sectionConfig.section_type) {
    case SectionType.TextSection:
      return (
        <TextSection section={sectionConfig} style={style.textSectionStyle} />
      );
    case SectionType.LatestNews:
      return (
        <NewsSection section={sectionConfig} style={style.newsSectionStyle} />
      );
  }
};

const Section: React.FC<SectionProps> = ({ sectionConfig, index }) => {
  const { sectionStyle, location, newsSectionStyle, textSectionStyle } =
    getStyle(index);

  const content = getContent(sectionConfig, index, {
    newsSectionStyle,
    textSectionStyle,
  });

  return (
    <section>
      <SectionHeader
        title={sectionConfig.section_header}
        style={sectionStyle}
        location={location}
      />
      {content}
    </section>
  );
};

export default Section;



File: layouts/SectionHeader.tsx
import React from 'react';
import styles from '../styles/layouts/SectionHeader.module.scss';

const SectionLocation = {
  RIGHT_ALIGNED: styles.rightAligned,
  LEFT_ALIGNED: styles.leftAligned,
  MIDDLE_ALIGNED: styles.middleAligned,
} as const;

const SectionHeaderStyle = {
  primary: styles.style1,
  secondary: styles.style2,
} as const;

type LocationType = (typeof SectionLocation)[keyof typeof SectionLocation];
type StyleType = (typeof SectionHeaderStyle)[keyof typeof SectionHeaderStyle];

interface Props {
  title: string;
  style?: StyleType;
  location?: LocationType;
}

export default function SectionHeader({
  title,
  style = SectionHeaderStyle.primary,
  location = SectionLocation.LEFT_ALIGNED,
}: Props) {
  return (
    <div className={`${styles.sectionHeader} ${style} ${location}`}>
      <div className={styles.frontRoundedCornerContainer}>
        <div className={styles.frontRoundedCorner} />
      </div>
      <span className={styles.sectionHeaderContainer}>
        <h2 className={styles.sectionHeaderTitle}>{title}</h2>
      </span>
      <div className={styles.backRoundedCornerContainer}>
        <div className={styles.backRoundedCorner} />
      </div>
    </div>
  );
}

export { SectionLocation, SectionHeaderStyle };



File: layouts/Error.tsx
// CSS
import styles from '../styles/layouts/Error.module.scss';
// Components
import NavBar from '../components/NavBar';
import Button, { ButtonType } from '../components/Button';
import React from 'react';
import { useEffect, useState } from 'react';
import Footer from '@/components/Footer';

export default function ErrorLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  const [allowReport, setAllowReport] = useState(false);
  const departureUrl = 'https://tcsca';
  const returnHref = '/'; // Allow user to return to home
  const reportHref =
    'https://github.com/Trent-Computer-Science-Club-Association/ClubWebsite/issues/new?labels=page-error&template=page-error.md'; // Allow users to report on GitHub

  useEffect(() => {
    // If the user is coming from a broken link on our site, they can report an issue
    // Note: document.referrer is not always reliable as there are ways it can be blocked
    if (
      document.referrer.includes(
        'localhost:3000' || document.referrer.startsWith(departureUrl)
      )
    ) {
      setAllowReport(true);
    } else {
      // If not, they don't need to report an issue
      setAllowReport(false);
    }
  }, []);

  return (
    <section className={styles.container}>
      <NavBar currentPage='' />
      <main className={styles.container}>
        <div className={styles.page}>
          <h1>Oops!</h1>
          {/* Display passed error message */}
          <div>{children}</div>
          {/* Actions the user can take */}
          <div>
            <Button
              type={ButtonType.LIGHT}
              href={returnHref}
              className={styles.button}
              label='Return Home'
            />
            {allowReport && (
              <Button
                type={ButtonType.LIGHT}
                href={reportHref}
                className={styles.button}
                label='Let us know'
              />
            )}
          </div>
        </div>
      </main>
      <Footer />
    </section>
  );
}



File: layouts/TextSection.tsx
import React from 'react';
import Image from '../components/Image';
import Button, { ButtonType } from '../components/Button';
import styles from '../styles/layouts/TextSection.module.scss';
import { type TextSection } from '../config';

const TextSectionStyle = {
  primary: styles.primaryStyle,
  secondary: styles.secondaryStyle,
} as const;

type TextSectionStyleType =
  (typeof TextSectionStyle)[keyof typeof TextSectionStyle];

interface Props {
  section: TextSection;
  style?: TextSectionStyleType;
}

interface PropsWithButton extends Props {
  buttonText: string;
  link: string;
}

export default function TextSection({
  section: { text, image, button },
  style = TextSectionStyle.primary,
}: Props | PropsWithButton) {
  return (
    <div className={styles.TextSectionWrapper}>
      <div className={`${styles.TextSection} ${style}`}>
        <div className={styles.TextAndButton}>
          <p>{text}</p>
          {/* Checks if buttonText and link are in props in order to conditionally render a button */}
          {button != null && (
            <Button
              type={ButtonType.LIGHT}
              href={button.href}
              label={button.text}
            />
          )}
        </div>
        <div className={styles.ImageWrapper}>
          <Image
            src={image.src}
            alt={image.alt}
            fill={true}
            className={styles.TextSectionImage}
          />
        </div>
      </div>
    </div>
  );
}

export { TextSectionStyle, type TextSectionStyleType };



File: layouts/ContactSection.tsx
import React from 'react';
import ContactForm, {
  TextInput,
  EmailInput,
  DropdownInput,
  Group,
} from '../components/ContactForm';
import TextBox from '../components/TextBox';
import styles from '../styles/layouts/ContactSection.module.scss';
import { website_config } from '../config';

interface ContactSectionProps {
  formData: Record<string, string>;
  onInputChange: (label: string, value: string) => void;
  onSubmit: (formData: Record<string, string>) => Promise<void | Response>;
}

export default function ContactSection({
  formData,
  onInputChange,
  onSubmit,
}: ContactSectionProps) {
  return (
    <div className={styles.contactSection} id='contact-form'>
      <div className={styles.left}>
        <ContactForm
          title='Get In Touch'
          description='Fill out the form below to contact us.'
          onSubmit={onSubmit} // Defines what data is sent to the server and how its handled (ex. adding metadata)
          formData={formData}
          onInputChange={onInputChange} // How to handle input being changed (for example, validation)
          formItems={[
            Group(
              TextInput('Name', 'Enter your name'),
              DropdownInput('Subject', 'Select your subject', [
                { value: 'Applying', label: 'Applying' },
                { value: 'Volunteering', label: 'Volunteering' },
                { value: 'Development', label: 'Development' },
                { value: 'Creative', label: 'Creative' },
                { value: 'Managerial', label: 'Managerial' },
                { value: 'Outreach', label: 'Outreach' },
              ])
            ),
            EmailInput('Email', 'Enter your email'),
            TextInput('Message', 'Enter your message', '', true),
          ]}
        />
      </div>
      <div className={styles.right}>
        <div className={styles.topBox}>
          <TextBox
            title='Why Join Us?'
            description='Join our community of passionate computer science enthusiasts and explore the latest technologies, collaborate on projects, and network with industry professionals.'
          />
        </div>
        <div className={styles.bottomBox}>
          <TextBox
            title='Get In Touch'
            description='Fill out the form below to contact us.'
            links={website_config.social_icons}
          />
        </div>
      </div>
    </div>
  );
}



File: layouts/ListingsSection.tsx
import React, { useState } from 'react';
import { FaCheck, FaChevronDown } from 'react-icons/fa';
import Button, { ButtonType } from '../components/Button';
import styles from '../styles/layouts/Listing.module.scss';
import modalStyles from '../styles/components/Modal.module.scss';
import ReactMarkdown from 'react-markdown';
import Modal from 'react-modal';
import { Listing, website_config } from '../config';
import Link from 'next/link';
import ListingCard from '../components/ListingCard';

interface ListingsSectionProps {
  positions?: Listing[];
  formData: Record<string, string>;
  onInputChange: (label: string, value: string) => void;
  onSubmit: (formData: Record<string, string>) => Promise<void | Response>;
}

// Set the app element for accessibility
Modal.setAppElement('#__next');

const ListingsSection: React.FC<ListingsSectionProps> = ({
  positions = [],
  onInputChange,
}) => {
  // State for expanded view and modal
  const [isExpanded, setIsExpanded] = useState(false);
  const [modalState, setModalState] = useState<{
    isOpen: boolean;
    listing: Listing | null;
  }>({
    isOpen: false,
    listing: null,
  });

  // Number of cards to display per row
  const cardsPerRow = 3;

  // Function to open/close the modal and set the current listing
  const setModal = (isOpen: boolean, listing: Listing | null = null) => {
    setModalState({ isOpen, listing: isOpen ? listing : modalState.listing });
  };

  // Handle the apply action
  const handleApply = () => {
    onInputChange('Subject', modalState.listing?.title ?? '');
    setModal(false);
    // Scroll to the contact form
    const contactForm = document.getElementById('contact-form');
    if (contactForm) {
      contactForm.scrollIntoView({ behavior: 'smooth' });
    }
  };

  // Render content when there are no open positions
  const getNoPositionsContent = () => (
    <div className={styles.noPositions}>
      <p>
        There are no positions open at the moment. Please follow our&nbsp;
        <Link href={website_config.linkedin} target='_blank'>
          LinkedIn
        </Link>
        &nbsp; for updates.
      </p>
    </div>
  );

  // Render the list of visible listings
  const getListingsContent = (visibleListings: Listing[]) => (
    <div className={styles.listingsSection}>
      {visibleListings.map((position, index) => (
        <ListingCard
          key={index}
          position={position}
          onLearnMore={(position) => setModal(true, position)}
        />
      ))}
    </div>
  );

  // Render the expand/collapse button
  const getExpandButton = () => (
    <button
      className={`${styles.expandButton} ${isExpanded ? styles.expanded : ''}`}
      onClick={() => setIsExpanded(!isExpanded)}
    >
      <div className={styles.expandButtonContent}>
        <div
          className={`${styles.expandIcon} ${isExpanded ? styles.rotated : ''}`}
        >
          <FaChevronDown />
        </div>
        <span>{isExpanded ? 'Show Less' : 'Show More'}</span>
      </div>
    </button>
  );

  // Main function to get the content based on the current state
  const getContent = () => {
    if (positions.length === 0) {
      return getNoPositionsContent();
    }

    // Sort listings by priority (lower number = higher priority)
    const sortedListings = [...positions].sort(
      (a, b) => (a.priority ?? Infinity) - (b.priority ?? Infinity)
    );

    // Determine visible listings based on expanded state
    const visibleListings = isExpanded
      ? sortedListings
      : sortedListings.slice(0, cardsPerRow);

    return (
      <>
        {getListingsContent(visibleListings)}
        {positions.length > cardsPerRow && getExpandButton()}
      </>
    );
  };

  return (
    <div className={styles.listingsSectionWrapper}>
      {getContent()}
      <Modal
        isOpen={modalState.isOpen}
        onRequestClose={() => setModal(false)}
        contentLabel={modalState.listing?.title || ''}
        className={modalStyles.modal}
        overlayClassName={modalStyles.modalOverlay}
      >
        {modalState.listing && (
          <div className={modalStyles.modalContent}>
            <h2>{modalState.listing.title}</h2>
            <ReactMarkdown>
              {modalState.listing.modal ?? modalState.listing.description}
            </ReactMarkdown>
            <ul>
              {modalState.listing.requirements.map((requirement, reqIndex) => (
                <li key={reqIndex}>
                  <div className={modalStyles.requirementIcon}>
                    {requirement.icon ? <requirement.icon /> : <FaCheck />}
                  </div>
                  <p>{requirement.description}</p>
                </li>
              ))}
            </ul>
            <div className={modalStyles.buttonContainer}>
              <Button
                type={ButtonType.LIGHT}
                onClick={() => setModal(false)}
                label='Close'
              />
              <Button
                type={ButtonType.LIGHT}
                onClick={handleApply}
                label='Apply'
              />
            </div>
          </div>
        )}
      </Modal>
    </div>
  );
};

export default ListingsSection;



File: pages/index.tsx
import styles from '../styles/Home.module.scss';
import { home_page } from '../config';
// Internal Components
import NavBar from '../components/NavBar';
import EventBanner from '../components/EventBanner';
import HeroBanner from '../components/HeroBanner';
import Footer from '../components/Footer';
import Section from '../layouts/Section';

export default function Home() {
  const { sections } = home_page;
  // UI
  return (
    <>
      <EventBanner />
      <NavBar currentPage='Home' />
      <section className={styles.container}>
        <main className={styles.MainArea}>
          <HeroBanner />
          {/* In the config we have a list of sections, this is how we iterate through them */}
          {sections.map((section, i) => (
            <section key={i}>
              <Section sectionConfig={section} index={i} />
            </section>
          ))}
        </main>
        <Footer />
      </section>
    </>
  );
}



File: pages/404.tsx
// Components
import ErrorLayout from '../layouts/Error';

export default function ErrorPage() {
  return (
    <ErrorLayout>
      <p>
        404 - Page not found <br />
        This page may be in development or may not exist at this time
      </p>
    </ErrorLayout>
  );
}



File: pages/_error.tsx
// Components
import type { NextPageContext } from 'next';
import ErrorLayout from '../layouts/Error';
import Image from '../components/Image';

interface Props {
  statusCode: number;
}

export default function ErrorPage({ statusCode }: Props) {
  return (
    <ErrorLayout>
      <p>
        {statusCode != 418
          ? `An error occured with status code ${statusCode}`
          : 'An unknown error occured'}
        {statusCode == 418 && teapot()}
      </p>
    </ErrorLayout>
  );
}

// Get error information
ErrorPage.getInitialProps = ({ res, err }: NextPageContext) => {
  const statusCode = res ? res.statusCode : err ? err.statusCode : 404;
  return { statusCode };
};

// Easter Egg
function teapot() {
  return (
    <>
      <p>If you're looking for coffee you're in the wrong place</p>
      <div>
        <Image src='/teapot.svg' alt='Teapot outline' />
      </div>
    </>
  );
}



File: pages/Contact.tsx
import React, { useState } from 'react';
import styles from '../styles/About.module.scss';
import { contact_page, website_config } from '../config';
import NavBar from '../components/NavBar';
import Footer from '../components/Footer';
import BlurBanner from '../components/BlurBanner';
import ListingsSection from '../layouts/ListingsSection';
import TextSection, { TextSectionStyle } from '../layouts/TextSection';
import EventBanner from '../components/EventBanner';
import SectionHeader, {
  SectionHeaderStyle,
  SectionLocation,
} from '../layouts/SectionHeader';
import ContactSection from '../layouts/ContactSection';

export default function Home() {
  const [formData, setFormData] = useState<Record<string, string>>({});

  const handleInputChange = (label: string, value: string) => {
    setFormData((prevData) => ({ ...prevData, [label]: value }));
  };

  const handleSubmit = async (formData: Record<string, string>) => {
    const { Email, Subject, Name, Message } = formData;
    const webhookUrl = 'DISCORD_WEBHOOK_URL_HERE';

    const webhookPayload = {
      content: `**Subject:** ${Subject}\n**Name:** ${Name}\n**Email:** ${Email}\n**Message:**\n${Message}`,
      username: 'TCSCA Contact Form',
    };

    const response = await fetch(webhookUrl, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(webhookPayload),
    }).catch((error) => {
      console.error('Error submitting to Discord webhook:', error);
    });

    if (response) {
      if (response.status === 204) {
        console.log('Form submitted successfully to Discord');
      } else if (response.status === 400) {
        console.error('Error: Bad request');
      } else if (response.status === 404) {
        console.error('Error: Webhook not found');
      } else if (response.status === 429) {
        console.error('Error: Rate limited');
      } else {
        console.error(`Error: Unknown (${response.status})`);
      }
    }

    return response;
  };

  return (
    <>
      <EventBanner />
      <NavBar currentPage='Contact Us' />
      <section className={styles.container}>
        <main className={styles.MainArea}>
          <BlurBanner
            imagePath='/FaryonBridge.jpg'
            altText='About Us Image'
            title={website_config.title}
            sectionHeader='Positions'
          />
          <ListingsSection
            positions={contact_page.listings}
            formData={formData}
            onInputChange={handleInputChange}
            onSubmit={handleSubmit}
          />
          <SectionHeader
            title='Become a Sponsor'
            style={SectionHeaderStyle.primary}
            location={SectionLocation.RIGHT_ALIGNED}
          />
          <div className={styles.sponsorButton}>
            <TextSection
              section={contact_page.sponsor_section}
              style={TextSectionStyle.primary}
            />
          </div>
          <SectionHeader
            title='Contact Us'
            style={SectionHeaderStyle.secondary}
            location={SectionLocation.LEFT_ALIGNED}
          />
          <ContactSection
            formData={formData}
            onInputChange={handleInputChange}
            onSubmit={handleSubmit}
          />
        </main>
        <Footer />
      </section>
    </>
  );
}



File: pages/_document.tsx
import { Html, Head, Main, NextScript } from 'next/document';

export default function Document() {
  return (
    <Html lang='en'>
      <Head />
      <body>
        <Main />
        <NextScript />
      </body>
    </Html>
  );
}



File: pages/_app.tsx
// Styles
import '@/styles/globals.scss';
// Vitals
import { SpeedInsights } from '@vercel/speed-insights/next';
import { Analytics } from '@vercel/analytics/react';
// Types
import type { AppProps } from 'next/app';
function MyApp({ Component, pageProps }: AppProps) {
  return (
    <>
      {/* Next Speed Vitals */}
      <SpeedInsights />
      <Analytics />
      {/* Page Body */}
      <Component {...pageProps} />
    </>
  );
}

export default MyApp;



File: styles/Home.module.scss
.container {
  @apply flex flex-col;
}

.MainArea {
  @apply bg-color-1 flex-grow;
}



File: styles/components/Modal.module.scss
.modal {
  @apply fixed top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 bg-color-3 rounded-lg shadow-md p-8 w-11/12 max-w-2xl z-50;
}

.modalOverlay {
  @apply fixed top-0 left-0 w-full h-full bg-black bg-opacity-50 z-40;
  & div:first-child {
    @apply flex flex-col;

    h2 {
      @apply text-2xl font-bold mb-4 text-color-2;
    }

    > p {
      @apply mb-4 text-color-2;
    }

    ul {
      @apply space-y-2 mb-4;

      li {
        @apply flex items-center text-color-2;
      }
    }

    .requirementIcon {
      @apply relative w-5 h-5 mr-2 flex-shrink-0;

      img {
        @apply w-full h-full object-contain;
      }
    }

    .buttonContainer {
      @apply flex space-x-4 mt-4 justify-center;
    }
  }
}



File: styles/components/Footer.module.scss
.Footer {
  @apply grid grid-cols-2 gap-4 p-4;
  @apply bg-color-3;

  a {
    @apply text-color-2;
    @apply underline;

    &:visited,
    &:active {
      @apply text-color-2;
    }

    &:hover {
      @apply text-hover-1;
    }
  }
}

.top {
  @apply col-span-2;
  @apply text-center;
  @apply text-color-2;
  @apply my-4;
}

.left {
  @apply flex gap-4 items-center;

  a {
    @apply text-color-2;
    @apply underline;

    &:hover {
      @apply text-hover-1;
    }
  }

  .logo {
    @apply w-10 h-10;

    img {
      @apply rounded-md;
      @apply p-1;
    }
  }
}

.right {
  @apply col-span-1 grid;
  @apply gap-4;

  h1 {
    @apply text-5xl font-bold text-center;
    @apply text-color-2;
  }

  .socialMedia {
    @apply flex gap-4;
    @apply h-10;
    @apply justify-end;
  }
}



File: styles/components/Logo.module.scss
.container {
  @apply w-1/2 h-auto mb-4;

  div {
    @apply relative;
    @apply w-full h-full;
    @apply pt-[100%]; // TODO: Prevents this image from squishing (not even visable sometimes)
  }

  img {
    @apply object-cover rounded-xl;
    @apply bg-black;
  }
}



File: styles/components/HeroBanner.module.scss
// left side should have icon and apply button
// right side should have title, divider, tagline and buttons for social media
// use grid for layout
.HeroBanner {
  @apply grid grid-cols-2 gap-4 p-4;
  @apply my-8;
}

.leftColumn {
  @apply col-span-1 grid place-items-center;
}

.rightColumn {
  @apply col-span-1 grid place-items-center;
  @apply gap-4;

  h1 {
    @apply text-5xl font-bold text-center;
    @apply text-color-2;
  }

  .tagline {
    @apply text-xl;
    @apply italic;
    @apply text-center;
    @apply text-color-2;
  }

  .socialMedia {
    @apply flex gap-4;
    @apply justify-center;
  }
}



File: styles/components/TextBox.module.scss
.TextBox {
  @apply bg-color-3 text-white p-4 rounded-lg shadow-lg;

  h2 {
    @apply text-3xl font-bold mb-2 text-area-header;
  }

  p {
    @apply text-sm mb-4 text-color-2;
  }

  .links {
    @apply flex flex-col gap-1;
    @apply flex-shrink-0;
    a {
      @apply flex items-center;

      &:hover {
        @apply text-hover-1;
      }

      span {
        @apply ml-2;
      }
    }
  }
}



File: styles/components/ContactForm.module.scss
.contactForm {
  @apply bg-color-3 text-white p-4 rounded-lg shadow-lg;
  h2 {
    @apply text-3xl font-bold mb-2 text-area-header;
  }

  p {
    @apply text-sm mb-4 text-color-2;
  }

  form {
    @apply space-y-4;
  }

  .formField {
    @apply flex flex-col;
  }

  .group {
    @apply flex flex-row space-x-4;
  }

  .groupItem {
    @apply flex-1;
  }

  label {
    @apply text-sm mb-1 text-color-2 flex items-center;
  }

  .mandatory {
    @apply text-red-500 ml-1;
  }

  .invalidLabel {
    @apply text-red-500;
  }

  input,
  textarea {
    @apply w-full bg-color-3 text-white border-2 border-color-2 rounded-md p-2 outline-none;
    @apply h-10;
    &:focus:not(.invalidInput) {
      @apply border-area-header;
    }
  }

  .invalidInput {
    @apply border-red-500;
  }

  textarea {
    @apply h-40 resize-none;
  }

  button[type='submit'] {
    @apply w-full bg-secondary-green text-color-3 py-2 px-4 rounded-md hover:bg-green-600 mt-4 font-bold;
  }

  .errorText {
    @apply text-red-500 text-sm;
  }

  .marginTop {
    @apply mt-4;
  }

  .serverError {
    @apply text-red-500 mt-4;
  }

  .successMessage {
    @apply text-green-500 mt-4;
  }

  .errorMessage {
    @apply text-red-500 mt-4 font-bold;
  }

  .invalidField {
    .react-select__control {
      @apply border-red-500;
    }
  }
}



File: styles/components/EventBanner.module.scss
.EventBanner {
  @apply bg-event-banner;
  @apply flex justify-center items-center;
  @apply p-4;
}

.EventContent {
  @apply text-color-2;
  @apply flex flex-col;
  @apply gap-2;
}

.Markdown {
  @apply leading-relaxed;
  @apply text-base;

  a {
    @apply underline;
    @apply text-color-2;

    &:hover {
      @apply text-hover-2;
    }
  }
}



File: styles/components/NavBar.module.scss
.NavBar {
  @apply bg-color-2 flex;
}

.Icon {
  @apply grow;
}

.LinkArea {
  @apply flex px-4;
  & > li {
    @apply p-4;
    &:hover {
      @apply text-hover-1;
    }
  }
}

.currentPage {
  @apply text-active-1;
}



File: styles/components/ListingCard.module.scss
.border {
  @apply p-1 rounded-lg shadow-md flex flex-col relative overflow-hidden;
  @apply transition-transform duration-300 ease-out;
  @apply bg-color-2;
  &:hover {
    @apply -translate-y-2;
  }
}

.card {
  @apply bg-color-3 rounded-lg shadow-md p-6 flex flex-col flex-1 relative overflow-hidden;

  h2 {
    @apply text-2xl font-bold mb-2 text-color-2;
  }

  > p {
    @apply mb-4 text-color-2;
  }

  hr {
    @apply w-full h-0.5 bg-color-2 mb-2 border-0 rounded-lg;

    &.developerUnderline {
      @apply bg-development-color;
    }

    &.creativeUnderline {
      @apply bg-creative-color;
    }

    &.managerialUnderline {
      @apply bg-managerial-color;
    }

    &.volunteerUnderline {
      @apply bg-volunteer-color;
    }

    // This is done since tailwind doesn't support multi-color gradients
    &.gradientUnderline {
      background: linear-gradient(
        135deg,
        #ff0000,
        #ff7f00,
        #ffff00,
        #00ff00,
        #0000ff,
        #ee82ee,
        #8b00ff
      );
      @apply text-white;
    }
  }

  ul {
    @apply space-y-2 mb-4;

    li {
      @apply flex items-center text-color-2;
    }
  }

  button {
    @apply mt-auto mr-auto text-color-3;
  }
}

// This is done since tailwind doesn't support multi-color gradients
.gradientBorder {
  background: linear-gradient(
    135deg,
    #ff0000,
    #ff7f00,
    #ffff00,
    #00ff00,
    #0000ff,
    #ee82ee,
    #8b00ff
  );
  @apply text-white;
}

.requirementIcon {
  @apply relative w-5 h-5 mr-2 flex-shrink-0;

  img {
    @apply w-full h-full;
  }
}



File: styles/components/BlurBanner.module.scss
.Container {
  @apply w-full;
  @apply relative;
}

.BlurBanner {
  @apply w-full;
  @apply relative;
  @apply flex flex-col;
}

.imageContainer {
  @apply w-full h-[40rem];
  @apply relative;
  img {
    @apply blur-sm object-cover;
  }
}

.overlay {
  @apply absolute inset-0;
  @apply flex items-center justify-center;
  @apply bg-black/40;
  @apply z-10;
}

.title {
  @apply w-1/2;
  @apply text-6xl font-bold text-white leading-normal text-center;
}

.waveContainer {
  @apply absolute bottom-0 left-0 right-0;
  @apply h-1/3;
  @apply z-20;
  @apply translate-y-2;
  @apply w-full;

  > div {
    @apply absolute bottom-4 left-8;
    @apply z-30;
    @apply inline-block;

    > h2 {
      @apply text-4xl font-semibold text-white;
      @apply mb-2;
    }

    > hr {
      @apply border-t-2 border-white;
      @apply rounded-2xl;
      @apply w-full;
      @apply mt-1;
    }
  }

  img {
    @apply object-cover object-bottom;
  }
}



File: styles/layouts/Section.module.scss



File: styles/layouts/Listing.module.scss
.listingsSection {
  @apply grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 p-6;
  @apply w-full overflow-hidden;
}

.listingsSectionWrapper {
  @apply flex flex-col items-center m-4;

  .noPositions {
    @apply flex flex-col items-center text-color-2 text-center mt-4;

    p {
      @apply w-1/2 text-3xl leading-loose font-bold my-16;
    }

    a {
      @apply underline text-color-2;

      &:visited,
      &:active {
        @apply text-color-2;
      }

      &:hover {
        @apply text-hover-1;
      }
    }
  }
}

.expandButton {
  @apply mt-4 flex items-center justify-center text-color-2 bg-color-3 px-6 py-2 rounded-full shadow-md transition-colors duration-300;

  &:hover {
    @apply bg-active-1;
  }

  .expandButtonContent {
    @apply flex items-center;

    span {
      @apply ml-2;
    }

    .expandIcon {
      @apply w-5 h-5;
      @apply flex items-center justify-center;
      @apply transition-transform duration-300;

      svg {
        @apply w-full h-full;
      }

      &.rotated {
        @apply transform rotate-180;
      }
    }
  }
}



File: styles/layouts/SectionHeader.module.scss
.sectionHeader {
  @apply w-full;
  @apply pt-4 px-4;
  @apply flex;
  @apply overflow-hidden;
}

.sectionHeaderContainer {
  @apply rounded-t-lg;
  @apply px-4 py-2;
  @apply shrink;
  @apply flex-grow-0;

  h2 {
    @apply text-2xl font-bold text-center text-color-2;
  }
}

// Header Variants
.style1 {
  @apply bg-color-1;
  & > span {
    @apply bg-color-3;
  }

  .frontRoundedCornerContainer,
  .backRoundedCornerContainer {
    @apply bg-color-3;
  }

  .frontRoundedCorner,
  .backRoundedCorner {
    @apply bg-color-1;
  }
}
.style2 {
  @apply bg-color-3;
  & > span {
    @apply bg-color-1;
  }

  .frontRoundedCornerContainer,
  .backRoundedCornerContainer {
    @apply bg-color-1;
  }

  .frontRoundedCorner,
  .backRoundedCorner {
    @apply bg-color-3;
  }
}

// Header Alignments
.rightAligned {
  @apply justify-end;
}

.leftAligned {
  @apply justify-start;
}

.middleAligned {
  @apply justify-center;
}

.frontRoundedCornerContainer,
.backRoundedCornerContainer {
  @apply w-10;
  @apply flex items-stretch;
}

.frontRoundedCorner,
.backRoundedCorner {
  @apply w-full h-full;
}

.frontRoundedCorner {
  @apply rounded-br-xl;
}

.backRoundedCorner {
  @apply rounded-bl-xl;
}



File: styles/layouts/LatestNews.module.scss
.latestNewsLayout {
  @apply grid;
}

.newsItem {
  @apply grid grid-cols-5 items-center;
  @apply m-4 p-4;
  @apply rounded-xl;
  @apply duration-300 ease-in-out;

  &:hover {
    @apply bg-hover-1;
    @apply shadow-lg;
    @apply transition-[box-shadow,background-color];
  }

  .left {
    @apply col-span-4;
    @apply text-white;
    @apply grid grid-cols-1;

    p {
      @apply text-xl;
    }

    .date {
      @apply text-base;
    }
  }

  .right {
    @apply grid;
    @apply col-span-1;

    .learnMore {
      @apply ml-auto;
    }
  }
}

.primaryStyle {
  @apply bg-color-3;
  & > span {
    @apply bg-color-1;
  }
}

.secondaryStyle {
  @apply bg-color-1;
  & > span {
    @apply bg-color-3;
  }
}



File: styles/layouts/TextSection.module.scss
.TextSection {
  @apply grid gap-4 p-4;
  @apply py-16;
  @apply px-10;
  @apply items-center;

  @screen md {
    @apply grid-cols-2;
  }

  p {
    @apply text-color-2 leading-relaxed text-xl;
    @apply pr-4 mb-4;
  }

  h2 {
    @apply text-color-2 leading-relaxed text-3xl font-bold;
    @apply pr-4 mb-4;
  }
}

.TextAndButton {
  @apply col-span-1;
  @apply order-2;

  @screen md {
    @apply order-1;
  }
}

.ImageWrapper {
  @apply relative;
  @apply w-full;
  @apply h-0;
  @apply pb-[80%];
  @apply overflow-hidden;
  @apply rounded-xl;
  @apply order-1;

  @screen md {
    @apply order-2;
  }
}

.TextSectionImage {
  @apply object-cover;
  @apply object-center;
}

.primaryStyle {
  @apply bg-color-3;
  & > span {
    @apply bg-color-1;
  }
}

.secondaryStyle {
  @apply bg-color-1;
  & > span {
    @apply bg-color-3;
  }
}



File: styles/layouts/Error.module.scss
.container {
  @apply flex flex-col;
  @apply size-full h-screen;

  .page {
    @apply flex flex-col flex-1;
    @apply p-4 gap-8;
    @apply size-full;
    @apply justify-center items-center text-center;
    @apply bg-color-1;

    h1,
    p {
      @apply text-white;
    }

    h1 {
      @apply text-6xl font-bold;
    }

    .button {
      @apply m-2;
    }
  }
}



File: styles/layouts/ContactSection.module.scss
.contactSection {
  @apply grid gap-4 p-4;
  @apply items-center;

  @screen md {
    @apply grid-cols-2;
  }
}

.left {
  @apply col-span-1;
  @apply mb-8;

  @screen md {
    @apply mb-0;
  }
}

.right {
  @apply col-span-1;
  @apply flex flex-col;
  @apply h-full;
}

.topBox {
  @apply mb-8;

  @screen md {
    @apply mb-auto;
  }
}

.bottomBox {
  @screen md {
    @apply mt-auto;
  }
}



File: styles/globals.scss
@tailwind base;
@tailwind components;
@tailwind utilities;

hr {
  @apply bg-color-2 h-0.5;
  @apply w-4/5;
}
.reactSelect {
  @apply w-full;
  .react-select__control {
    @apply bg-color-3 border-2 border-color-2 rounded-md;
    @apply text-white;
    @apply h-10;
    @apply flex items-center;
    &--is-focused {
      @apply border-area-header shadow-none;
    }
  }
  .react-select__value-container {
    @apply p-0 pr-2;
    @apply flex items-center;
    @apply ml-2;
    @apply overflow-hidden;
  }
  .react-select__input-container,
  .react-select__single-value {
    @apply text-white m-0 whitespace-nowrap overflow-hidden overflow-ellipsis;
  }
  .react-select__placeholder {
    @apply text-color-2;
  }
  .react-select__indicators {
    @apply p-0 flex items-center;
  }
  .react-select__indicator-separator {
    @apply hidden;
  }
  .react-select__menu {
    @apply bg-color-3 border-2 border-color-2 rounded-md;
  }
  .react-select__option {
    @apply text-white bg-color-3;
    &--is-selected {
      @apply bg-area-header;
      @apply text-color-3;
    }
    &--is-focused {
      @apply bg-color-1;
      @apply text-color-2;
    }
  }
}



File: styles/Button.module.scss
.button {
  @apply hover:shadow-lg;
  @apply inline-flex;
  @apply items-center;
  @apply justify-center;
  @apply relative;
  img {
    @apply object-contain relative;
    @apply w-full h-full;
  }
}

.imageWrapper {
  @apply relative;
  @apply w-6 h-6;
  @apply flex-shrink-0;
}

.buttonText {
  @apply ml-2 mr-2;
}

.socialBtn {
  @apply bg-socials;
  @apply rounded-md;
  @apply p-2;
  @apply shadow-md;
}

.socialBtnDark {
  @extend .socialBtn;
  @apply bg-black;
}

.lightBtn {
  @apply bg-color-2;
  @apply rounded-md border-2 border-black;
  @apply p-2;
  @apply font-bold;
}

.navBtn {
  @apply text-color-3;
  @apply bg-transparent hover:text-hover-1;
  &.active {
    @apply text-active-1;
  }
  @apply hover:shadow-none;
}



File: styles/About.module.scss
.container {
  @apply flex flex-col;
}

.MainArea {
  @apply bg-color-1 flex-grow;
  .leftAligned {
    @apply bg-color-1;
  }
}

.sponsorButton {
  > div > div {
    @apply px-12;
  }
  button {
    @apply bg-event-banner text-white border-white;

    &:hover {
      @apply bg-hover-2;
    }
  }
}



